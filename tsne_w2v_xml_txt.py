# -*- coding: utf-8 -*-
"""tsne_w2v_xml_txt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17PuXR3YCE4sxEbpAeybscAdEfDyk_BkE
"""

import multiprocessing
import gensim 
from gensim.models import Word2Vec


def train_word2vec(filename):
    data = gensim.models.word2vec.LineSentence(filename)
    return Word2Vec(data, size=75, window=5, min_count=1, workers=multiprocessing.cpu_count())

filename = "2757_1112.txt.gz"
model = train_word2vec(filename)  #cuase problem

keys = ['bay', 'town', 'farm']
#keys = ['bay']
    
embedding_clusters = []
word_clusters = []
for word in keys:
    embeddings = []
    words = []
    for similar_word, _ in model.most_similar(word, topn=10):
        words.append(similar_word)
        embeddings.append(model[similar_word])
    embedding_clusters.append(embeddings)
    word_clusters.append(words)

print(word_clusters)

# 2D

from sklearn.manifold import TSNE
import numpy as np

embedding_clusters = np.array(embedding_clusters)
n, m, k = embedding_clusters.shape
tsne_model_en_2d = TSNE(perplexity=3, n_components=2, init='pca', n_iter=5000, random_state=2)  # 3500, 32
embeddings_en_2d = np.array(tsne_model_en_2d.fit_transform(embedding_clusters.reshape(n * m, k))).reshape(n, m, 2)

# Visualizaion I -2D

import matplotlib.pyplot as plt
import matplotlib.cm as cm

def tsne_plot_similar_words(title, labels, embedding_clusters, word_clusters, a, filename=None):
    plt.figure(figsize=(10, 7))
    colors = cm.rainbow(np.linspace(0, 1, len(labels)))
    for label, embeddings, words, color in zip(labels, embedding_clusters, word_clusters, colors):
        x = embeddings[:, 0]
        y = embeddings[:, 1]
        plt.scatter(x, y, c=color, alpha=a, label=label)
        for i, word in enumerate(words):
            plt.annotate(word, alpha=0.7, xy=(x[i], y[i]), xytext=(5, 2),
                         textcoords='offset points', ha='right', va='bottom', size=8)
    plt.legend(loc=4)
    plt.title(title)
    plt.grid(True)
    if filename:
        plt.savefig(filename, format='png', dpi=150, bbox_inches='tight')
    plt.show()


tsne_plot_similar_words('Similar words from 2757+1112', keys, embeddings_en_2d, word_clusters, 0.8, filename)

# Visualizing the whole embeddings-2D

model_ak = train_word2vec(filename)

words_ak = []
embeddings_ak = []
for word in list(model_ak.wv.vocab):
    embeddings_ak.append(model_ak.wv[word])
    words_ak.append(word)
    
tsne_ak_2d = TSNE(perplexity=5, n_components=2, init='pca', n_iter=1000, random_state=32)
embeddings_ak_2d = tsne_ak_2d.fit_transform(embeddings_ak)

def tsne_plot_2d(label, embeddings, words=[], a=1):
    plt.figure(figsize=(10, 7))
    colors = cm.rainbow(np.linspace(0, 1, 1))
    x = embeddings[:,0]
    y = embeddings[:,1]
    plt.scatter(x, y, c=colors, alpha=a, label=label)
    for i, word in enumerate(words):
        plt.annotate(word, alpha=0.3, xy=(x[i], y[i]), xytext=(5, 2), 
                     textcoords='offset points', ha='right', va='bottom', size=10)
    plt.legend(loc=4)
    plt.grid(True)
    plt.savefig("hhh.png", format='png', dpi=150, bbox_inches='tight')
    plt.show()

tsne_plot_2d('2757+1112', embeddings_ak_2d, a=0.5)





model_wp = train_word2vec(filename)

from sklearn.manifold import TSNE

words_wp = []
embeddings_wp = []
for word in list(model_wp.wv.vocab):
    embeddings_wp.append(model_wp.wv[word])
    words_wp.append(word)
    
    
tsne_wp_3d = TSNE(perplexity=10, n_components=3, init='pca', n_iter=300, random_state=10)
embeddings_wp_3d = tsne_wp_3d.fit_transform(embeddings_wp)

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.cm as cm
import numpy as np

def tsne_plot_3d(title, label, embeddings, a=1):
    fig = plt.figure()
    ax = Axes3D(fig)
    size_wem = len(embeddings)
    colors = cm.rainbow(np.linspace(0, 1, size_wem))
    plt.scatter(embeddings[:, 0], embeddings[:, 1], embeddings[:, 2], c=colors, alpha=a, label=label)
    plt.legend(loc=4)
    plt.title(title)
    plt.show()

# Visualizaion II -3D

tsne_plot_3d('Visualizing Embeddings using t-SNE', '2757+1112', embeddings_wp_3d, a=0.3)
#tsne_plot_2d('Visualizing Embeddings using t-SNE / 2D', '2757+1112', embeddings_wp_2d) !not working

######################################

np.array(embeddings).shape

# Visualizaion III-2D  new one!

import matplotlib.pyplot as plt

plt.scatter(*zip(*embeddings_wp_2d[:,:2]), c=np.array(embeddings_wp)[:,1], cmap='RdBu')
plt.show()





####################################### RUN BEFORE

#@title Default title text
#3 xml to txt file

filename_new = "27810.xml"

with open(filename_new,"r+") as f:
    new_f = f.readlines()
    f.seek(0)
    for line in new_f:
        if "<seg type=" not in line:
            f.write(line)
    f.truncate()
    
with open(filename_new,"r+") as f:
    new_f = f.readlines()
    f.seek(0)
    for line in new_f:
        if "<pb n=" not in line:
            f.write(line)
    f.truncate()
    
with open(filename_new,"r+") as f:
    new_f = f.readlines()
    f.seek(0)
    for line in new_f:
        if "<div xml:" not in line:
            f.write(line)
    f.truncate()
    
with open(filename_new,"r+") as f:
    new_f = f.readlines()
    f.seek(0)
    for line in new_f:
        if "<!--rb" not in line:
            f.write(line)
    f.truncate()



